import pandas as pd

def read_data(file_path):
    """
    Reads the data from the CSV file and converts the order_date to datetime.
    Handles errors and returns the data as a DataFrame.
    """
    try:
        data = pd.read_csv(file_path)
        data['order_date'] = pd.to_datetime(data['order_date'], errors='coerce')
        if data['order_date'].isnull().any():
            raise ValueError("Invalid date format found in 'order_date' column")
        return data
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
    except pd.errors.EmptyDataError:
        print("Error: The file is empty.")
    except pd.errors.ParserError:
        print("Error: The file contains malformed data.")
    except ValueError as ve:
        print(f"Error: {ve}")
    except Exception as e:
        print(f"Unexpected error: {e}")
    return None

def compute_total_revenue_per_month(data):
    """
    Computes the total revenue generated by the online store for each month.
    """
    try:
        data['month'] = data['order_date'].dt.to_period('M')
        revenue_per_month = data.groupby('month')['product_price'].sum()
        return revenue_per_month
    except Exception as e:
        print(f"Error computing total revenue per month: {e}")
        return None

def compute_total_revenue_per_product(data):
    """
    Computes the total revenue generated by each product.
    """
    try:
        revenue_per_product = data.groupby('product_name')['product_price'].sum()
        return revenue_per_product
    except Exception as e:
        print(f"Error computing total revenue per product: {e}")
        return None

def compute_total_revenue_per_customer(data):
    """
    Computes the total revenue generated by each customer.
    """
    try:
        revenue_per_customer = data.groupby('customer_id')['product_price'].sum()
        return revenue_per_customer
    except Exception as e:
        print(f"Error computing total revenue per customer: {e}")
        return None

def top_10_customers_by_revenue(data):
    """
    Identifies the top 10 customers by revenue generated.
    """
    try:
        revenue_per_customer = compute_total_revenue_per_customer(data)
        top_customers = revenue_per_customer.nlargest(10)
        return top_customers
    except Exception as e:
        print(f"Error identifying top 10 customers by revenue: {e}")
        return None

def main():
    """
    Main function to execute the tasks.
    """
    file_path = 'orders.csv'
    data = read_data(file_path)
    if data is not None:
        revenue_per_month = compute_total_revenue_per_month(data)
        if revenue_per_month is not None:
            print("Total Revenue per Month:\n", revenue_per_month)

        revenue_per_product = compute_total_revenue_per_product(data)
        if revenue_per_product is not None:
            print("\nTotal Revenue per Product:\n", revenue_per_product)

        revenue_per_customer = compute_total_revenue_per_customer(data)
        if revenue_per_customer is not None:
            print("\nTotal Revenue per Customer:\n", revenue_per_customer)

        top_customers = top_10_customers_by_revenue(data)
        if top_customers is not None:
            print("\nTop 10 Customers by Revenue:\n", top_customers)

if __name__ == "__main__":
    main()
